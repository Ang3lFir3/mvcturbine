namespace MvcTurbine.Samples.LoggingBlade
{
    using System.Web.Mvc;
    using Microsoft.Practices.Unity;

<<<<<<< HEAD
    public class LogAttribute : ActionFilterAttribute {
        // Since we're using the Unity container, we need to splicitly tell Unity
        // that this piece is a property dependency
=======
    public class LogAttribute : ActionFilterAttribute
    {
        // Tell Unity to inject this property
>>>>>>> Fixed the dependency issue with the ILogger on the LogAttribute.
        [Dependency]
        public ILogger Logger { get; set; }

        public override void OnActionExecuted(ActionExecutedContext filterContext)
        {
            LogExecution("[filter] -- Executed '{0}' ... ", filterContext.ActionDescriptor, "Executed");
            base.OnActionExecuted(filterContext);
        }

        public override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            LogExecution("[filter] -- Executing '{0}' ... ", filterContext.ActionDescriptor, "Executing");
            base.OnActionExecuting(filterContext);
        }

        private void LogExecution(string format, ActionDescriptor actionDescriptor, string context)
        {
            if (Logger == null) return;
            var message = string.Format(format, actionDescriptor.ActionName);
            Logger.LogMessage(message);
        }
    }
}
